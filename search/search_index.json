{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"geosdhydro","text":"<p>GIS tools for semi-distributed hydrologic modelling</p>"},{"location":"#installation","title":"Installation","text":"<p>You may use <code>uv</code> (recommended) to manage venvs and install packages. Optional.</p> <pre><code>pip install geosdhydro\n# uv pip install geosdhydro\n</code></pre> <p>To install from the latest git main branch:</p> <pre><code>pip install git+https://github.com/csiro-hydroinformatics/geosdhydro@main\n# uv pip install git+https://github.com/csiro-hydroinformatics/geosdhydro@main\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>See the documentation link above for sample notebook(s).</p> <p>There may be some command line features also available in the future, TBC.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2025-07-27","title":"0.1.0 - 2025-07-27","text":"<p>Compare with 0.0.1</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>converter from shapefile / geopandas link specs to a swift json catchment structure (53a9bbf by J-M).</li> </ul>"},{"location":"changelog/#001-2025-07-27","title":"0.0.1 - 2025-07-27","text":"<p>Compare with first commit</p>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at jean-michel.perraud@csiro.au. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd geosdhydro\nmake setup\n</code></pre> <p>Note</p> <p>If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv sync</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run geosdhydro [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>The entry-point to run commands and tasks is the <code>make</code> Python script, located in the <code>scripts</code> directory. Try running <code>make</code> to show the available commands and tasks. The commands do not need the Python dependencies to be installed, while the tasks do. The cross-platform tasks are written in Python, thanks to duty.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build geosdhydro. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.7.14</code> MPL-2.0 geopandas Geographic pandas extensions <code>1.1.1</code> BSD 3-Clause numpy Fundamental package for array computing in Python <code>&gt;=1.24</code> <code>2.3.2</code> BSD License packaging Core utilities for Python packages <code>&gt;=20.5</code> <code>25.0</code> Apache Software License + BSD License pandas Powerful data structures for data analysis, time series, and statistics <code>&gt;=2.0.0</code> <code>2.3.1</code> BSD License pyogrio Vectorized spatial vector file format I/O using GDAL/OGR <code>&gt;=0.7.2</code> <code>0.11.0</code> MIT License pyproj Python interface to PROJ (cartographic projections and coordinate transformations library) <code>&gt;=3.5.0</code> <code>3.7.1</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.2, &gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1, &gt;=2020.1</code> <code>2025.2</code> MIT shapely Manipulation and analysis of geometric objects <code>&gt;=2.0.0</code> <code>2.1.1</code> BSD 3-Clause six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT tzdata Provider of IANA time zone data <code>&gt;=2022.7</code> <code>2025.2</code> Apache-2.0"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT asttokens Annotate AST trees with source code positions <code>&gt;=2.1.0</code> <code>3.0.0</code> Apache 2.0 attrs Classes Without Boilerplate <code>&gt;=22.2.0</code> <code>25.3.0</code> MIT babel Internationalization utilities <code>~=2.10</code> <code>2.17.0</code> BSD-3-Clause backrefs A wrapper around re and regex that adds additional back references. <code>~=5.7.post1</code> <code>5.9</code> MIT beautifulsoup4 Screen-scraping library <code>&gt;=4.12</code> <code>4.13.4</code> MIT License bleach An easy safelist-based HTML-sanitizing tool. <code>!=5.0.0</code> <code>6.2.0</code> Apache Software License build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.2.post1</code> MIT License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.29.0</code> ? certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2025.7.14</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.14</code> <code>1.17.1</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.4.2</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.2.1</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License comm Jupyter Python Comm implementation, for usage in ipykernel, xeus-python etc. <code>&gt;=0.1.1</code> <code>0.2.3</code> BSD License coverage Code coverage measurement for Python <code>&gt;=7.5</code> <code>7.10.0</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>45.0.5</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD debugpy An implementation of the Debug Adapter Protocol for Python <code>&gt;=1.6.5</code> <code>1.8.15</code> MIT decorator Decorators for Humans <code>5.2.1</code> BSD-2-Clause defusedxml XML bomb protection for Python stdlib modules <code>0.7.1</code> PSFL docutils Docutils -- Python Documentation Utilities <code>&gt;=0.21.2</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.6</code> <code>1.6.2</code> ISC execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT executing Get the currently executing AST node of a frame, and other information <code>&gt;=1.2.0</code> <code>2.2.0</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=1.0.5</code> <code>1.0.5</code> ISC fastjsonschema Fastest Python implementation of JSON schema <code>&gt;=2.15</code> <code>2.21.1</code> BSD ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.3</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.12</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>&gt;=3.1.44</code> <code>3.1.45</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=1.6.2</code> <code>1.8.0</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.12.3</code> MIT id A tool for generating OIDC identities <code>1.5.0</code> Apache Software License idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.10</code> BSD License iniconfig brain-dead simple config-ini parsing <code>&gt;=1</code> <code>2.1.0</code> MIT ipykernel IPython Kernel for Jupyter <code>&gt;6.0.0, &lt;7.0.0</code> <code>6.30.0</code> ? ipython IPython: Productive Interactive Computing <code>&gt;=7.23.1</code> <code>9.4.0</code> BSD-3-Clause ipython_pygments_lexers Defines a variety of Pygments lexers for highlighting IPython code. <code>1.1.1</code> BSD License jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>6.0.1</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.2.1</code> MIT jedi An autocompletion tool for Python that can be used for text editors. <code>&gt;=0.16</code> <code>0.19.2</code> MIT jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.9.0</code> MIT Jinja2 A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.6</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License jsonschema An implementation of JSON Schema validation for Python <code>&gt;=2.6</code> <code>4.25.0</code> MIT jsonschema-specifications The JSON Schema meta-schemas and vocabularies, exposed as a Registry <code>&gt;=2023.03.6</code> <code>2025.4.1</code> MIT jupyter_client Jupyter protocol implementation and client libraries <code>&gt;=8.0.0</code> <code>8.6.3</code> BSD License jupyter_core Jupyter core package. A base package on which Jupyter projects rely. <code>&gt;=4.12, !=5.0.*</code> <code>5.8.1</code> BSD-3-Clause jupyterlab_pygments Pygments theme using JupyterLab CSS variables <code>0.3.0</code> BSD License jupytext Jupyter notebooks as Markdown documents, Julia, Python or R scripts <code>&gt;1.13.8, &lt;2</code> <code>1.17.2</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.6.0</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.6</code> <code>3.8.2</code> BSD-3-Clause markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.11.0</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License markdownify Convert HTML to markdown. <code>&gt;=0.14</code> <code>1.1.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>3.0.2</code> BSD License matplotlib-inline Inline Matplotlib backend for Jupyter <code>&gt;=0.1</code> <code>0.1.7</code> BSD License mdformat CommonMark compliant Markdown formatter <code>&gt;=0.7.21</code> <code>0.7.22</code> MIT License mdformat_tables An mdformat plugin for rendering tables. <code>&gt;=1.0</code> <code>1.0.0</code> MIT License mdit-py-plugins Collection of plugins for markdown-it-py <code>0.4.2</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mistune A sane and fast Markdown parser with useful plugins and renderers <code>&gt;=2.0.3, &lt;4</code> <code>3.1.3</code> BSD-3-Clause mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.1</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=1.4</code> <code>1.4.2</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-revision-date-localized-plugin Mkdocs plugin that enables displaying the localized date of the last git modification of a markdown file. <code>&gt;=1.2</code> <code>1.4.7</code> MIT mkdocs-jupyter Use Jupyter in mkdocs websites <code>&gt;=0.25.1</code> <code>0.25.1</code> Apache-2.0 mkdocs-llmstxt MkDocs plugin to generate an /llms.txt file. <code>&gt;=0.2</code> <code>0.3.0</code> ISC mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.6.16</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocs-section-index MkDocs plugin to allow clickable sections that lead to an index page <code>&gt;=0.3</code> <code>0.3.10</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.29</code> <code>0.30.0</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=1.16.2</code> <code>1.16.12</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.7.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.17.0</code> MIT mypy_extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=1.0.0</code> <code>1.1.0</code> MIT nbclient A client library for executing notebooks. Formerly nbconvert's ExecutePreprocessor. <code>&gt;=0.5.0</code> <code>0.10.2</code> BSD License nbconvert Converting Jupyter Notebooks (.ipynb files) to other formats.  Output formats include asciidoc, html, latex, markdown, pdf, py, rst, script.  nbconvert can be used both as a Python library (<code>import nbconvert</code>) or as a command line tool (invoked as <code>jupyter nbconvert ...</code>). <code>&gt;=7.2.9, &lt;8</code> <code>7.16.6</code> BSD License nbformat The Jupyter Notebook format <code>5.10.4</code> BSD License nest-asyncio Patch asyncio to allow nested event loops <code>&gt;=1.4</code> <code>1.6.0</code> BSD nh3 Python binding to Ammonia HTML sanitizer Rust crate <code>&gt;=0.2.14</code> <code>0.3.0</code> MIT packaging Core utilities for Python packages <code>&gt;=20.5</code> <code>25.0</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.7</code> MIT pandocfilters Utilities for writing pandoc filters in python <code>&gt;=1.4.1</code> <code>1.5.1</code> BSD-3-Clause parso A Python Parser <code>&gt;=0.8.4, &lt;0.9.0</code> <code>0.8.4</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pexpect Pexpect allows easy control of interactive console applications. <code>&gt;4.3</code> <code>4.9.0</code> ISC license platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2.2.0</code> <code>4.3.8</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.2</code> <code>1.6.0</code> MIT prompt_toolkit Library for building powerful interactive command lines in Python <code>&gt;=3.0.41, &lt;3.1.0</code> <code>3.0.51</code> BSD License psutil Cross-platform lib for process and system monitoring in Python.  NOTE: the syntax of this script MUST be kept compatible with Python 2.7. <code>&gt;=5.7</code> <code>7.0.0</code> BSD-3-Clause ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pure_eval Safely evaluate AST nodes without side effects <code>0.2.3</code> MIT pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.13.0, &lt;3.0.0</code> <code>2.19.2</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=6.3</code> <code>10.16</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.2.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.4.1</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>6.2.1</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.16.0</code> MIT License pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.8.0</code> MIT python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.2, &gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License pytz World timezone definitions, modern and historical <code>&gt;=2025.1, &gt;=2020.1</code> <code>2025.2</code> MIT PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.2</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>1.1</code> MIT pyzmq Python bindings for 0MQ <code>&gt;=25</code> <code>27.0.0</code> BSD License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>44.0</code> Apache License, Version 2.0 referencing JSON Referencing + Python <code>&gt;=0.28.4</code> <code>0.36.2</code> MIT requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.4</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>14.1.0</code> MIT rpds-py Python bindings to Rust's persistent data structures (rpds) <code>&gt;=0.7.1</code> <code>0.26.0</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.12.5</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.4</code> BSD License six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.17.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.2</code> BSD-3-Clause soupsieve A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.7</code> MIT stack-data Extract data from python stack frames and tracebacks for informative displays <code>0.6.3</code> MIT tornado Tornado is a Python web framework and asynchronous networking library, originally developed at FriendFeed. <code>&gt;=6.2</code> <code>6.5.1</code> Apache-2.0 traitlets Traitlets Python configuration system <code>&gt;=5.1</code> <code>5.14.3</code> BSD License twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>6.1.0</code> Apache Software License type-lens type-lens is a Python template project designed to simplify the setup of a new project. <code>&gt;=0.2.4</code> <code>0.2.4</code> MIT types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.8.0.20250708</code> Apache-2.0 types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20250516</code> Apache-2.0 typing_extensions Backported and Experimental Type Hints for Python 3.9+ <code>&gt;=4.0</code> <code>4.14.1</code> PSF-2.0 urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.5.0</code> MIT watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>6.0.0</code> Apache-2.0 wcwidth Measures the displayed width of unicode strings in a terminal <code>&gt;=0.2.13</code> <code>0.2.13</code> MIT webencodings Character encoding aliases for legacy web content <code>0.5.1</code> BSD yore Manage legacy code with comments. <code>&gt;=0.3.3</code> <code>0.4.4</code> ISC"},{"location":"license/","title":"License","text":"<pre><code>BSD 3-Clause License\n\nCopyright (c) 2025, CSIRO\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"nb/basic_usage/","title":"Generating swift catchment structure","text":"In\u00a0[1]: Copied! <pre>import geopandas as gpd\n</pre> import geopandas as gpd In\u00a0[2]: Copied! <pre>from pathlib import Path\n</pre> from pathlib import Path In\u00a0[3]: Copied! <pre>fpath = Path.home() / \"data/wnsw/Abercrombie/Abercrombie_links4swift.shp\"\n</pre> fpath = Path.home() / \"data/wnsw/Abercrombie/Abercrombie_links4swift.shp\" In\u00a0[4]: Copied! <pre>fpath.exists()\n</pre> fpath.exists() Out[4]: <pre>True</pre> In\u00a0[5]: Copied! <pre>link_specs = gpd.read_file(fpath)\n\nprint(link_specs.head())\n</pre> link_specs = gpd.read_file(fpath)  print(link_specs.head()) <pre>   OBJECTID  Shape_Leng  LinkID  FromNodeID  ToNodeID  HeadLink  SPathCnt  \\\n0        14    0.063634      14    43408481  43346081         0        11   \n1        15    0.139247      15    43352571  43346081         0        11   \n2        16    0.133341      16    43349393  43346081         0        18   \n3        17    0.135098      17    43636314  43346081         0        14   \n4        18    0.323005      18    43408465  43346081         0        40   \n\n   LPathCnt      SPathLen      LPathLen        DArea  Prim_Link  SWIFT_ID  \\\n0        11  12423.789416  12423.789416          1.0          0      1801   \n1        11  24712.339973  24712.339973          1.0          0      1804   \n2        18  26499.836521  26499.836521          1.0          0      1805   \n3        14  34835.592042  34835.592042          1.0          0      1802   \n4        40  57889.009690  57889.009690  510940000.0          1        18   \n\n   ToNodeID2       DArea2                                           geometry  \n0          0         -1.0  LINESTRING (149.33174 -34.01786, 149.31528 -33...  \n1          0         -1.0  LINESTRING (149.45444 -33.95167, 149.31528 -33...  \n2          0         -1.0  LINESTRING (149.38417 -33.84222, 149.31528 -33...  \n3          0         -1.0  LINESTRING (149.41821 -34.04389, 149.31528 -33...  \n4   43346081  510940000.0  LINESTRING (149.59776 -34.11303, 149.31528 -33...  \n</pre> In\u00a0[6]: Copied! <pre>{x: link_specs[x].dtype for x in link_specs.columns}\n</pre> {x: link_specs[x].dtype for x in link_specs.columns} Out[6]: <pre>{'OBJECTID': dtype('int64'),\n 'Shape_Leng': dtype('float64'),\n 'LinkID': dtype('int64'),\n 'FromNodeID': dtype('int64'),\n 'ToNodeID': dtype('int64'),\n 'HeadLink': dtype('int32'),\n 'SPathCnt': dtype('int64'),\n 'LPathCnt': dtype('int64'),\n 'SPathLen': dtype('float64'),\n 'LPathLen': dtype('float64'),\n 'DArea': dtype('float64'),\n 'Prim_Link': dtype('int32'),\n 'SWIFT_ID': dtype('int32'),\n 'ToNodeID2': dtype('int64'),\n 'DArea2': dtype('float64'),\n 'geometry': &lt;geopandas.array.GeometryDtype at 0x7f986ff22120&gt;}</pre> In\u00a0[7]: Copied! <pre>from geosdhydro.swift import ShapefileToSwiftConverter\n</pre> from geosdhydro.swift import ShapefileToSwiftConverter In\u00a0[8]: Copied! <pre>converter = ShapefileToSwiftConverter(link_specs)\nresult = converter.convert()\n</pre> converter = ShapefileToSwiftConverter(link_specs) result = converter.convert()  In\u00a0[9]: Copied! <pre>f\"there are {len(result[\"Links\"])} links, {len(result[\"Nodes\"])} nodes, {len(result[\"SubAreas\"])} subareas\"\n</pre> f\"there are {len(result[\"Links\"])} links, {len(result[\"Nodes\"])} nodes, {len(result[\"SubAreas\"])} subareas\" Out[9]: <pre>'there are 29 links, 30 nodes, 17 subareas'</pre> <p>The object <code>converter</code> has a <code>save_to_file</code> method, or you can use:</p> In\u00a0[10]: Copied! <pre>import json\n</pre> import json In\u00a0[11]: Copied! <pre>fp = Path.home() / \"tmp\" / \"abercrombie_swift.json\"\n# with open(fp, \"w\") as f:\n#     json.dump(result, f, indent=2)\n</pre> fp = Path.home() / \"tmp\" / \"abercrombie_swift.json\" # with open(fp, \"w\") as f: #     json.dump(result, f, indent=2)  In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"nb/basic_usage/#generating-swift-catchment-structure","title":"Generating swift catchment structure\u00b6","text":""},{"location":"reference/api/","title":"API reference","text":""},{"location":"reference/api/#geosdhydro","title":"geosdhydro","text":"<p>geosdhydro package.</p> <p>GIS tools for semi-distributed hydrologic modelling</p> <p>Modules:</p> <ul> <li> <code>swift</code>           \u2013            <p>Convert shapefile data to SWIFT JSON catchment structure.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_parser</code>             \u2013              <p>Return the CLI argument parser.</p> </li> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> </ul>"},{"location":"reference/api/#geosdhydro.get_parser","title":"get_parser","text":"<pre><code>get_parser() -&gt; ArgumentParser\n</code></pre> <p>Return the CLI argument parser.</p> <p>Returns:</p> <ul> <li> <code>ArgumentParser</code>           \u2013            <p>An argparse parser.</p> </li> </ul> Source code in <code>src/geosdhydro/_internal/cli.py</code> <pre><code>def get_parser() -&gt; argparse.ArgumentParser:\n    \"\"\"Return the CLI argument parser.\n\n    Returns:\n        An argparse parser.\n    \"\"\"\n    parser = argparse.ArgumentParser(prog=\"geosdhydro\")\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=f\"%(prog)s {debug._get_version()}\")\n    parser.add_argument(\"--debug-info\", action=_DebugInfo, help=\"Print debug information.\")\n    return parser\n</code></pre>"},{"location":"reference/api/#geosdhydro.main","title":"main","text":"<pre><code>main(args: list[str] | None = None) -&gt; int\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>geosdhydro</code> or <code>python -m geosdhydro</code>.</p> <p>Parameters:</p> <ul> <li> <code>args</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>Arguments passed from the command line.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code>           \u2013            <p>An exit code.</p> </li> </ul> Source code in <code>src/geosdhydro/_internal/cli.py</code> <pre><code>def main(args: list[str] | None = None) -&gt; int:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `geosdhydro` or `python -m geosdhydro`.\n\n    Parameters:\n        args: Arguments passed from the command line.\n\n    Returns:\n        An exit code.\n    \"\"\"\n    parser = get_parser()\n    opts = parser.parse_args(args=args)\n    print(opts)\n    return 0\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}